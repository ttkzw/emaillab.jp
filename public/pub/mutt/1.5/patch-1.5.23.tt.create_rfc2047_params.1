diff -uNr mutt-1.5.23.orig/PATCHES mutt-1.5.23/PATCHES
--- mutt-1.5.23.orig/PATCHES	2014-03-13 01:03:44.000000000 +0900
+++ mutt-1.5.23/PATCHES	2014-07-14 22:20:24.000000000 +0900
@@ -0,0 +1 @@
+patch-1.5.23.tt.create_rfc2047_params.1
diff -uNr mutt-1.5.23.orig/init.h mutt-1.5.23/init.h
--- mutt-1.5.23.orig/init.h	2014-03-13 01:06:17.000000000 +0900
+++ mutt-1.5.23/init.h	2014-07-14 22:20:24.000000000 +0900
@@ -556,6 +556,17 @@
   ** If \fI``no''\fP, never attempt to verify cryptographic signatures.
   ** (Crypto only)
   */
+  { "create_rfc2047_parameters", DT_BOOL, R_NONE, OPTCREATERFC2047PARAMS, 0 },
+  /*
+  ** .pp
+  ** When this variable is set, Mutt will add the following RFC-2047-encoded
+  ** MIME parameter to Content-Type header field as filename for attachment:
+  ** name="=?iso-2022-jp?B?GyRCO244MxsoQi50eHQ=?="
+  ** .pp
+  ** Note: this use of RFC 2047's encoding is explicitly prohibited
+  ** by the standard. You may set this variable only if a mailer
+  ** of recipients can not parse RFC 2231 parameters.
+  */
   { "date_format",	DT_STR,	 R_BOTH, UL &DateFmt, UL "!%a, %b %d, %Y at %I:%M:%S%p %Z" },
   /*
   ** .pp
diff -uNr mutt-1.5.23.orig/mutt.h mutt-1.5.23/mutt.h
--- mutt-1.5.23.orig/mutt.h	2014-03-13 01:06:17.000000000 +0900
+++ mutt-1.5.23/mutt.h	2014-07-14 22:20:24.000000000 +0900
@@ -330,6 +330,7 @@
   OPTCOLLAPSEUNREAD,
   OPTCONFIRMAPPEND,
   OPTCONFIRMCREATE,
+  OPTCREATERFC2047PARAMS,
   OPTDELETEUNTAG,
   OPTDIGESTCOLLAPSE,
   OPTDUPTHREADS,
diff -uNr mutt-1.5.23.orig/sendlib.c mutt-1.5.23/sendlib.c
--- mutt-1.5.23.orig/sendlib.c	2014-03-13 01:03:45.000000000 +0900
+++ mutt-1.5.23/sendlib.c	2014-07-14 22:20:24.000000000 +0900
@@ -348,6 +348,30 @@
     }
   }
 
+  if (a->use_disp && option (OPTCREATERFC2047PARAMS))
+  {
+    if(!(fn = a->d_filename))
+      fn = a->filename;
+
+    if (fn)
+    {
+      char *tmp;
+
+      /* Strip off the leading path... */
+      if ((t = strrchr (fn, '/')))
+	t++;
+      else
+        t = fn;
+
+      buffer[0] = 0;
+      tmp = safe_strdup (t);
+      rfc2047_encode_string (&tmp);
+      rfc822_cat (buffer, sizeof (buffer), tmp, MimeSpecials);
+      FREE (&tmp);
+      fprintf (f, ";\n\tname=%s", buffer);
+    }
+  }
+
   fputc ('\n', f);
 
   if (a->description)
